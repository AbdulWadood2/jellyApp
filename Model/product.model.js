const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
  },
  price: { type: String, default: null },
  quantity: { type: String, default: null },
  sku: { type: String, default: null },
  barcode_number: { type: String, default: null },
  barcode_formats: { type: String, default: null },
  mpn: { type: String, default: null },
  model: { type: String, default: null },
  asin: { type: String, default: null },
  title: { type: String, default: null },
  category: { type: String, default: null },
  manufacturer: { type: String, default: null },
  brand: { type: String, default: null },
  age_group: { type: String, default: null },
  ingredients: { type: String, default: null },
  nutrition_facts: { type: String, default: null },
  energy_efficiency_class: { type: String, default: null },
  color: { type: String, default: null },
  gender: { type: String, default: null },
  material: { type: String, default: null },
  pattern: { type: String, default: null },
  format: { type: String, default: null },
  multipack: { type: String, default: null },
  size: { type: String, default: null },
  length: { type: String, default: null },
  width: { type: String, default: null },
  height: { type: String, default: null },
  weight: { type: String, default: null },
  release_date: { type: String, default: null },
  description: { type: String, default: null },
  last_update: { type: String, default: null },
  images: [{ type: String, default: null }],
  upc: { type: String, default: null },
  condition: {
    type: String,
    enum: ["new", "refurnished", "used"],
    default: null,
  },
  isfreeshipping: { type: Boolean, enum: [true, false], default: null },
  dateCreated: { type: Date, default: null },
  dateModified: { type: Date, default: null },
});
const data = mongoose.model("product", userSchema);
module.exports = data;
